import random
import math
import copy
class TicTacToe:
    def __init__(self):
        self.board = [" " for _ in range(9)]  # Representing the 3x3 Tic-Tac-Toe board
        self.winning_combinations = [(0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6), (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)]

    def print_board(self):
        print("-------------")
        for i in range(0, 9, 3):
            print(f"| {self.board[i]} | {self.board[i + 1]} | {self.board[i + 2]} |")
            print("-------------")

    def available_moves(self):
        return [i for i in range(9) if self.board[i] == " "]

    def check_winner(self):
        for combination in self.winning_combinations:
            if self.board[combination[0]] == self.board[combination[1]] == self.board[combination[2]] != " ":
                return self.board[combination[0]]
        if " " not in self.board:
            return "Tie"
        return None

    def make_move(self, position, player):
        self.board[position] = player
def minimax(board, depth, maximizing_player, alpha, beta):
    if board.check_winner() is not None:
        if board.check_winner() == "X":
            return -1
        elif board.check_winner() == "O":
            return 1
        else:
            return 0

    if maximizing_player:
        max_eval = -math.inf
        for move in board.available_moves():
            new_board = copy.deepcopy(board)
            new_board.make_move(move, "O")
            eval = minimax(new_board, depth + 1, False, alpha, beta)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for move in board.available_moves():
            new_board = copy.deepcopy(board)
            new_board.make_move(move, "X")
            eval = minimax(new_board, depth + 1, True, alpha, beta)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval
def ai_move(board):
    best_move = None
    best_eval = -math.inf
    alpha = -math.inf
    beta = math.inf
    for move in board.available_moves():
        new_board = copy.deepcopy(board)
        new_board.make_move(move, "O")
        eval = minimax(new_board, 0, False, alpha, beta)
        if eval > best_eval:
            best_eval = eval
            best_move = move
        alpha = max(alpha, eval)
    return best_move
def main():
    board = TicTacToe()
    board.print_board()
    while True:
        user_move = int(input("Enter your move (1-9): ")) - 1
        if user_move not in board.available_moves():
            print("Invalid move. Try again.")
            continue
        board.make_move(user_move, "X")
        board.print_board()

        if board.check_winner() == "X":
            print("Congratulations! You win!")
            break
        elif board.check_winner() == "Tie":
            print("It's a tie!")
            break

        ai_move_position = ai_move(board)
        print(f"AI moves to position {ai_move_position + 1}")
        board.make_move(ai_move_position, "O")
        board.print_board()

        if board.check_winner() == "O":
            print("AI wins! Better luck next time.")
            break
        elif board.check_winner() == "Tie":
            print("It's a tie!")
            break

if __name__ == "__main__":
    main()
